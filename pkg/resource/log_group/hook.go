// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package log_group

import (
	"context"

	svcapitypes "github.com/aws-controllers-k8s/cloudwatchlogs-controller/apis/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	svcsdk "github.com/aws/aws-sdk-go/service/cloudwatchlogs"
)

func (rm *resourceManager) updateRetentionPeriod(
	ctx context.Context,
	desired *resource,
) (err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.updateRetentionPeriod")
	defer func(err error) {
		exit(err)
	}(err)

	if desired.ko.Spec.RetentionDays != nil && *desired.ko.Spec.RetentionDays != 0 {
		input := &svcsdk.PutRetentionPolicyInput{
			RetentionInDays: desired.ko.Spec.RetentionDays,
			LogGroupName:    desired.ko.Spec.Name,
		}

		_, err = rm.sdkapi.PutRetentionPolicyWithContext(ctx, input)
		rm.metrics.RecordAPICall("UPDATE", "PutRetentionPolicy", err)
		if err != nil {
			return err
		}
		return nil
	}

	input := &svcsdk.DeleteRetentionPolicyInput{
		LogGroupName: desired.ko.Spec.Name,
	}

	_, err = rm.sdkapi.DeleteRetentionPolicyWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "DeleteRetentionPolicy", err)
	if err != nil {
		return err
	}
	return nil
}

// customUpdateLogGroup patches each of the resource properties in the backend AWS
// service API and returns a new resource with updated fields.
func (rm *resourceManager) customUpdateLogGroup(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.customUpdateLogGroup")
	defer exit(err)

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	if delta.DifferentAt("Spec.RetentionDays") {
		if err := rm.updateRetentionPeriod(ctx, desired); err != nil {
			return &resource{ko}, err
		}
	}
	if desired.ko.Spec.RetentionDays != nil {
		ko.Status.RetentionInDays = desired.ko.Spec.RetentionDays
	} else {
		var retention int64 = 0
		ko.Status.RetentionInDays = &retention
	}

	return &resource{ko}, nil
}

// addRetentionToSpec copies retention value from status to spec so as to
// enable comparison during sdkUpdate phase.
func (rm *resourceManager) addRetentionToSpec(
	ctx context.Context,
	r *resource,
	ko *svcapitypes.LogGroup,
) (err error) {
	ko.Spec.RetentionDays = ko.Status.RetentionInDays
	return
}

// customPreCompare ensures that default values of types are initialised and
// server side defaults are excluded from the delta.
func customPreCompare(
	delta *ackcompare.Delta,
	a *resource,
	b *resource,
) {
	var retention int64 = 0
	if a.ko.Spec.RetentionDays == nil {
		a.ko.Spec.RetentionDays = &retention
	}

	if b.ko.Spec.RetentionDays == nil {
		b.ko.Spec.RetentionDays = &retention
	}
}
